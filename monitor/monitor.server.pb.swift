/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: github.com/TheThingsNetwork/api/monitor/monitor.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC

/// Type for errors thrown from generated server code.
internal enum Monitor_MonitorServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Monitor_MonitorProvider {
  func routerstatus(session : Monitor_MonitorRouterStatusSession) throws
  func gatewaystatus(session : Monitor_MonitorGatewayStatusSession) throws
  func gatewayuplink(session : Monitor_MonitorGatewayUplinkSession) throws
  func gatewaydownlink(session : Monitor_MonitorGatewayDownlinkSession) throws
  func brokerstatus(session : Monitor_MonitorBrokerStatusSession) throws
  func brokeruplink(session : Monitor_MonitorBrokerUplinkSession) throws
  func brokerdownlink(session : Monitor_MonitorBrokerDownlinkSession) throws
  func handlerstatus(session : Monitor_MonitorHandlerStatusSession) throws
  func handleruplink(session : Monitor_MonitorHandlerUplinkSession) throws
  func handlerdownlink(session : Monitor_MonitorHandlerDownlinkSession) throws
  func networkserverstatus(session : Monitor_MonitorNetworkServerStatusSession) throws
  func logs(session : Monitor_MonitorLogsSession) throws
}

/// Common properties available in each service session.
internal class Monitor_MonitorSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : Int = 0
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// RouterStatus (Client Streaming)
internal class Monitor_MonitorRouterStatusSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Router_Status {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Router_Status?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Router_Status(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.routerstatus(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// GatewayStatus (Client Streaming)
internal class Monitor_MonitorGatewayStatusSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Gateway_Status {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Gateway_Status?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Gateway_Status(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.gatewaystatus(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// GatewayUplink (Client Streaming)
internal class Monitor_MonitorGatewayUplinkSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Router_UplinkMessage {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Router_UplinkMessage?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Router_UplinkMessage(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.gatewayuplink(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// GatewayDownlink (Client Streaming)
internal class Monitor_MonitorGatewayDownlinkSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Router_DownlinkMessage {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Router_DownlinkMessage?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Router_DownlinkMessage(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.gatewaydownlink(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// BrokerStatus (Client Streaming)
internal class Monitor_MonitorBrokerStatusSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Broker_Status {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Broker_Status?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Broker_Status(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.brokerstatus(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// BrokerUplink (Client Streaming)
internal class Monitor_MonitorBrokerUplinkSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Broker_DeduplicatedUplinkMessage {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Broker_DeduplicatedUplinkMessage?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Broker_DeduplicatedUplinkMessage(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.brokeruplink(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// BrokerDownlink (Client Streaming)
internal class Monitor_MonitorBrokerDownlinkSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Broker_DownlinkMessage {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Broker_DownlinkMessage?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Broker_DownlinkMessage(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.brokerdownlink(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// HandlerStatus (Client Streaming)
internal class Monitor_MonitorHandlerStatusSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Handler_Status {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Handler_Status?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Handler_Status(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.handlerstatus(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// HandlerUplink (Client Streaming)
internal class Monitor_MonitorHandlerUplinkSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Broker_DeduplicatedUplinkMessage {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Broker_DeduplicatedUplinkMessage?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Broker_DeduplicatedUplinkMessage(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.handleruplink(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// HandlerDownlink (Client Streaming)
internal class Monitor_MonitorHandlerDownlinkSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Broker_DownlinkMessage {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Broker_DownlinkMessage?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Broker_DownlinkMessage(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.handlerdownlink(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// NetworkServerStatus (Client Streaming)
internal class Monitor_MonitorNetworkServerStatusSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Networkserver_Status {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Networkserver_Status?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Networkserver_Status(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.networkserverstatus(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}

// Logs (Client Streaming)
internal class Monitor_MonitorLogsSession : Monitor_MonitorSession {
  private var provider : Monitor_MonitorProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> Monitor_LogMessage {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Monitor_LogMessage?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        requestMessage = try? Monitor_LogMessage(serializedData:requestData)
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if requestMessage == nil {
      throw Monitor_MonitorServerError.endOfStream
    }
    return requestMessage!
  }

  /// Send a response and close the connection.
  internal func sendAndClose(_ response: Google_Protobuf_Empty) throws {
    try self.handler.sendResponse(message:response.serializedData(),
                                  statusCode:self.statusCode,
                                  statusMessage:self.statusMessage,
                                  trailingMetadata:self.trailingMetadata)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.logs(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}


/// Main server for generated service
internal class Monitor_MonitorServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Monitor_MonitorProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Monitor_MonitorProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Monitor_MonitorProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      assert(false) // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/monitor.Monitor/RouterStatus":
          try Monitor_MonitorRouterStatusSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/GatewayStatus":
          try Monitor_MonitorGatewayStatusSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/GatewayUplink":
          try Monitor_MonitorGatewayUplinkSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/GatewayDownlink":
          try Monitor_MonitorGatewayDownlinkSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/BrokerStatus":
          try Monitor_MonitorBrokerStatusSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/BrokerUplink":
          try Monitor_MonitorBrokerUplinkSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/BrokerDownlink":
          try Monitor_MonitorBrokerDownlinkSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/HandlerStatus":
          try Monitor_MonitorHandlerStatusSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/HandlerUplink":
          try Monitor_MonitorHandlerUplinkSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/HandlerDownlink":
          try Monitor_MonitorHandlerDownlinkSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/NetworkServerStatus":
          try Monitor_MonitorNetworkServerStatusSession(handler:handler, provider:provider).run(queue:queue)
        case "/monitor.Monitor/Logs":
          try Monitor_MonitorLogsSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}
