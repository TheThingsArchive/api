/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.lorawan.ActivationMetadata', null, global);
goog.exportSymbol('proto.lorawan.CFList', null, global);
goog.exportSymbol('proto.lorawan.DLSettings', null, global);
goog.exportSymbol('proto.lorawan.FCtrl', null, global);
goog.exportSymbol('proto.lorawan.FHDR', null, global);
goog.exportSymbol('proto.lorawan.FrequencyPlan', null, global);
goog.exportSymbol('proto.lorawan.JoinAcceptPayload', null, global);
goog.exportSymbol('proto.lorawan.JoinRequestPayload', null, global);
goog.exportSymbol('proto.lorawan.MACCommand', null, global);
goog.exportSymbol('proto.lorawan.MACPayload', null, global);
goog.exportSymbol('proto.lorawan.MHDR', null, global);
goog.exportSymbol('proto.lorawan.MType', null, global);
goog.exportSymbol('proto.lorawan.Major', null, global);
goog.exportSymbol('proto.lorawan.Message', null, global);
goog.exportSymbol('proto.lorawan.Metadata', null, global);
goog.exportSymbol('proto.lorawan.Modulation', null, global);
goog.exportSymbol('proto.lorawan.TxConfiguration', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lorawan.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.Metadata.displayName = 'proto.lorawan.Metadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    modulation: jspb.Message.getFieldWithDefault(msg, 11, 0),
    dataRate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    bitRate: jspb.Message.getFieldWithDefault(msg, 13, 0),
    codingRate: jspb.Message.getFieldWithDefault(msg, 14, ""),
    fCnt: jspb.Message.getFieldWithDefault(msg, 15, 0),
    frequencyPlan: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.Metadata}
 */
proto.lorawan.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.Metadata;
  return proto.lorawan.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.Metadata}
 */
proto.lorawan.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {!proto.lorawan.Modulation} */ (reader.readEnum());
      msg.setModulation(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataRate(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBitRate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodingRate(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    case 16:
      var value = /** @type {!proto.lorawan.FrequencyPlan} */ (reader.readEnum());
      msg.setFrequencyPlan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModulation();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getDataRate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getBitRate();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getCodingRate();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getFrequencyPlan();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
};


/**
 * optional Modulation modulation = 11;
 * @return {!proto.lorawan.Modulation}
 */
proto.lorawan.Metadata.prototype.getModulation = function() {
  return /** @type {!proto.lorawan.Modulation} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.lorawan.Modulation} value */
proto.lorawan.Metadata.prototype.setModulation = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional string data_rate = 12;
 * @return {string}
 */
proto.lorawan.Metadata.prototype.getDataRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.lorawan.Metadata.prototype.setDataRate = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint32 bit_rate = 13;
 * @return {number}
 */
proto.lorawan.Metadata.prototype.getBitRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.lorawan.Metadata.prototype.setBitRate = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string coding_rate = 14;
 * @return {string}
 */
proto.lorawan.Metadata.prototype.getCodingRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.lorawan.Metadata.prototype.setCodingRate = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional uint32 f_cnt = 15;
 * @return {number}
 */
proto.lorawan.Metadata.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.lorawan.Metadata.prototype.setFCnt = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional FrequencyPlan frequency_plan = 16;
 * @return {!proto.lorawan.FrequencyPlan}
 */
proto.lorawan.Metadata.prototype.getFrequencyPlan = function() {
  return /** @type {!proto.lorawan.FrequencyPlan} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.lorawan.FrequencyPlan} value */
proto.lorawan.Metadata.prototype.setFrequencyPlan = function(value) {
  jspb.Message.setProto3EnumField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.TxConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lorawan.TxConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.TxConfiguration.displayName = 'proto.lorawan.TxConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.TxConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.TxConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.TxConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.TxConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    modulation: jspb.Message.getFieldWithDefault(msg, 11, 0),
    dataRate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    bitRate: jspb.Message.getFieldWithDefault(msg, 13, 0),
    codingRate: jspb.Message.getFieldWithDefault(msg, 14, ""),
    fCnt: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.TxConfiguration}
 */
proto.lorawan.TxConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.TxConfiguration;
  return proto.lorawan.TxConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.TxConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.TxConfiguration}
 */
proto.lorawan.TxConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {!proto.lorawan.Modulation} */ (reader.readEnum());
      msg.setModulation(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataRate(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBitRate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodingRate(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.TxConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.TxConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.TxConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.TxConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModulation();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getDataRate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getBitRate();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getCodingRate();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
};


/**
 * optional Modulation modulation = 11;
 * @return {!proto.lorawan.Modulation}
 */
proto.lorawan.TxConfiguration.prototype.getModulation = function() {
  return /** @type {!proto.lorawan.Modulation} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.lorawan.Modulation} value */
proto.lorawan.TxConfiguration.prototype.setModulation = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional string data_rate = 12;
 * @return {string}
 */
proto.lorawan.TxConfiguration.prototype.getDataRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.lorawan.TxConfiguration.prototype.setDataRate = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional uint32 bit_rate = 13;
 * @return {number}
 */
proto.lorawan.TxConfiguration.prototype.getBitRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.lorawan.TxConfiguration.prototype.setBitRate = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional string coding_rate = 14;
 * @return {string}
 */
proto.lorawan.TxConfiguration.prototype.getCodingRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.lorawan.TxConfiguration.prototype.setCodingRate = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional uint32 f_cnt = 15;
 * @return {number}
 */
proto.lorawan.TxConfiguration.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.lorawan.TxConfiguration.prototype.setFCnt = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.ActivationMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lorawan.ActivationMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.ActivationMetadata.displayName = 'proto.lorawan.ActivationMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.ActivationMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.ActivationMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.ActivationMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.ActivationMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    appEui: msg.getAppEui_asB64(),
    devEui: msg.getDevEui_asB64(),
    devAddr: msg.getDevAddr_asB64(),
    nwkSKey: msg.getNwkSKey_asB64(),
    rx1DrOffset: jspb.Message.getFieldWithDefault(msg, 11, 0),
    rx2Dr: jspb.Message.getFieldWithDefault(msg, 12, 0),
    rxDelay: jspb.Message.getFieldWithDefault(msg, 13, 0),
    cfList: (f = msg.getCfList()) && proto.lorawan.CFList.toObject(includeInstance, f),
    frequencyPlan: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.ActivationMetadata}
 */
proto.lorawan.ActivationMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.ActivationMetadata;
  return proto.lorawan.ActivationMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.ActivationMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.ActivationMetadata}
 */
proto.lorawan.ActivationMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppEui(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevAddr(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNwkSKey(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRx1DrOffset(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRx2Dr(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxDelay(value);
      break;
    case 14:
      var value = new proto.lorawan.CFList;
      reader.readMessage(value,proto.lorawan.CFList.deserializeBinaryFromReader);
      msg.setCfList(value);
      break;
    case 15:
      var value = /** @type {!proto.lorawan.FrequencyPlan} */ (reader.readEnum());
      msg.setFrequencyPlan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.ActivationMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.ActivationMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.ActivationMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.ActivationMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDevAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getNwkSKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getRx1DrOffset();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getRx2Dr();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = message.getRxDelay();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getCfList();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.lorawan.CFList.serializeBinaryToWriter
    );
  }
  f = message.getFrequencyPlan();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
};


/**
 * optional bytes app_eui = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.ActivationMetadata.prototype.getAppEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes app_eui = 1;
 * This is a type-conversion wrapper around `getAppEui()`
 * @return {string}
 */
proto.lorawan.ActivationMetadata.prototype.getAppEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppEui()));
};


/**
 * optional bytes app_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppEui()`
 * @return {!Uint8Array}
 */
proto.lorawan.ActivationMetadata.prototype.getAppEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.ActivationMetadata.prototype.setAppEui = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes dev_eui = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.ActivationMetadata.prototype.getDevEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes dev_eui = 2;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.lorawan.ActivationMetadata.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.lorawan.ActivationMetadata.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.ActivationMetadata.prototype.setDevEui = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes dev_addr = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.ActivationMetadata.prototype.getDevAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes dev_addr = 3;
 * This is a type-conversion wrapper around `getDevAddr()`
 * @return {string}
 */
proto.lorawan.ActivationMetadata.prototype.getDevAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevAddr()));
};


/**
 * optional bytes dev_addr = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevAddr()`
 * @return {!Uint8Array}
 */
proto.lorawan.ActivationMetadata.prototype.getDevAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.ActivationMetadata.prototype.setDevAddr = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes nwk_s_key = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.ActivationMetadata.prototype.getNwkSKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes nwk_s_key = 4;
 * This is a type-conversion wrapper around `getNwkSKey()`
 * @return {string}
 */
proto.lorawan.ActivationMetadata.prototype.getNwkSKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNwkSKey()));
};


/**
 * optional bytes nwk_s_key = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNwkSKey()`
 * @return {!Uint8Array}
 */
proto.lorawan.ActivationMetadata.prototype.getNwkSKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNwkSKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.ActivationMetadata.prototype.setNwkSKey = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint32 rx1_dr_offset = 11;
 * @return {number}
 */
proto.lorawan.ActivationMetadata.prototype.getRx1DrOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.lorawan.ActivationMetadata.prototype.setRx1DrOffset = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 rx2_dr = 12;
 * @return {number}
 */
proto.lorawan.ActivationMetadata.prototype.getRx2Dr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.lorawan.ActivationMetadata.prototype.setRx2Dr = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint32 rx_delay = 13;
 * @return {number}
 */
proto.lorawan.ActivationMetadata.prototype.getRxDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.lorawan.ActivationMetadata.prototype.setRxDelay = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional CFList cf_list = 14;
 * @return {?proto.lorawan.CFList}
 */
proto.lorawan.ActivationMetadata.prototype.getCfList = function() {
  return /** @type{?proto.lorawan.CFList} */ (
    jspb.Message.getWrapperField(this, proto.lorawan.CFList, 14));
};


/** @param {?proto.lorawan.CFList|undefined} value */
proto.lorawan.ActivationMetadata.prototype.setCfList = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.lorawan.ActivationMetadata.prototype.clearCfList = function() {
  this.setCfList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lorawan.ActivationMetadata.prototype.hasCfList = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional FrequencyPlan frequency_plan = 15;
 * @return {!proto.lorawan.FrequencyPlan}
 */
proto.lorawan.ActivationMetadata.prototype.getFrequencyPlan = function() {
  return /** @type {!proto.lorawan.FrequencyPlan} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.lorawan.FrequencyPlan} value */
proto.lorawan.ActivationMetadata.prototype.setFrequencyPlan = function(value) {
  jspb.Message.setProto3EnumField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lorawan.Message.oneofGroups_);
};
goog.inherits(proto.lorawan.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.Message.displayName = 'proto.lorawan.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lorawan.Message.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.lorawan.Message.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  MAC_PAYLOAD: 3,
  JOIN_REQUEST_PAYLOAD: 4,
  JOIN_ACCEPT_PAYLOAD: 5
};

/**
 * @return {proto.lorawan.Message.PayloadCase}
 */
proto.lorawan.Message.prototype.getPayloadCase = function() {
  return /** @type {proto.lorawan.Message.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.lorawan.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    mHdr: (f = msg.getMHdr()) && proto.lorawan.MHDR.toObject(includeInstance, f),
    mic: msg.getMic_asB64(),
    macPayload: (f = msg.getMacPayload()) && proto.lorawan.MACPayload.toObject(includeInstance, f),
    joinRequestPayload: (f = msg.getJoinRequestPayload()) && proto.lorawan.JoinRequestPayload.toObject(includeInstance, f),
    joinAcceptPayload: (f = msg.getJoinAcceptPayload()) && proto.lorawan.JoinAcceptPayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.Message}
 */
proto.lorawan.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.Message;
  return proto.lorawan.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.Message}
 */
proto.lorawan.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lorawan.MHDR;
      reader.readMessage(value,proto.lorawan.MHDR.deserializeBinaryFromReader);
      msg.setMHdr(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMic(value);
      break;
    case 3:
      var value = new proto.lorawan.MACPayload;
      reader.readMessage(value,proto.lorawan.MACPayload.deserializeBinaryFromReader);
      msg.setMacPayload(value);
      break;
    case 4:
      var value = new proto.lorawan.JoinRequestPayload;
      reader.readMessage(value,proto.lorawan.JoinRequestPayload.deserializeBinaryFromReader);
      msg.setJoinRequestPayload(value);
      break;
    case 5:
      var value = new proto.lorawan.JoinAcceptPayload;
      reader.readMessage(value,proto.lorawan.JoinAcceptPayload.deserializeBinaryFromReader);
      msg.setJoinAcceptPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMHdr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lorawan.MHDR.serializeBinaryToWriter
    );
  }
  f = message.getMic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMacPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lorawan.MACPayload.serializeBinaryToWriter
    );
  }
  f = message.getJoinRequestPayload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lorawan.JoinRequestPayload.serializeBinaryToWriter
    );
  }
  f = message.getJoinAcceptPayload();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lorawan.JoinAcceptPayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional MHDR m_hdr = 1;
 * @return {?proto.lorawan.MHDR}
 */
proto.lorawan.Message.prototype.getMHdr = function() {
  return /** @type{?proto.lorawan.MHDR} */ (
    jspb.Message.getWrapperField(this, proto.lorawan.MHDR, 1));
};


/** @param {?proto.lorawan.MHDR|undefined} value */
proto.lorawan.Message.prototype.setMHdr = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lorawan.Message.prototype.clearMHdr = function() {
  this.setMHdr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lorawan.Message.prototype.hasMHdr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes mic = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.Message.prototype.getMic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes mic = 2;
 * This is a type-conversion wrapper around `getMic()`
 * @return {string}
 */
proto.lorawan.Message.prototype.getMic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMic()));
};


/**
 * optional bytes mic = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMic()`
 * @return {!Uint8Array}
 */
proto.lorawan.Message.prototype.getMic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMic()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.Message.prototype.setMic = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional MACPayload mac_payload = 3;
 * @return {?proto.lorawan.MACPayload}
 */
proto.lorawan.Message.prototype.getMacPayload = function() {
  return /** @type{?proto.lorawan.MACPayload} */ (
    jspb.Message.getWrapperField(this, proto.lorawan.MACPayload, 3));
};


/** @param {?proto.lorawan.MACPayload|undefined} value */
proto.lorawan.Message.prototype.setMacPayload = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.lorawan.Message.oneofGroups_[0], value);
};


proto.lorawan.Message.prototype.clearMacPayload = function() {
  this.setMacPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lorawan.Message.prototype.hasMacPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional JoinRequestPayload join_request_payload = 4;
 * @return {?proto.lorawan.JoinRequestPayload}
 */
proto.lorawan.Message.prototype.getJoinRequestPayload = function() {
  return /** @type{?proto.lorawan.JoinRequestPayload} */ (
    jspb.Message.getWrapperField(this, proto.lorawan.JoinRequestPayload, 4));
};


/** @param {?proto.lorawan.JoinRequestPayload|undefined} value */
proto.lorawan.Message.prototype.setJoinRequestPayload = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.lorawan.Message.oneofGroups_[0], value);
};


proto.lorawan.Message.prototype.clearJoinRequestPayload = function() {
  this.setJoinRequestPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lorawan.Message.prototype.hasJoinRequestPayload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional JoinAcceptPayload join_accept_payload = 5;
 * @return {?proto.lorawan.JoinAcceptPayload}
 */
proto.lorawan.Message.prototype.getJoinAcceptPayload = function() {
  return /** @type{?proto.lorawan.JoinAcceptPayload} */ (
    jspb.Message.getWrapperField(this, proto.lorawan.JoinAcceptPayload, 5));
};


/** @param {?proto.lorawan.JoinAcceptPayload|undefined} value */
proto.lorawan.Message.prototype.setJoinAcceptPayload = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.lorawan.Message.oneofGroups_[0], value);
};


proto.lorawan.Message.prototype.clearJoinAcceptPayload = function() {
  this.setJoinAcceptPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lorawan.Message.prototype.hasJoinAcceptPayload = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.MHDR = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lorawan.MHDR, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.MHDR.displayName = 'proto.lorawan.MHDR';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.MHDR.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.MHDR.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.MHDR} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.MHDR.toObject = function(includeInstance, msg) {
  var f, obj = {
    mType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    major: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.MHDR}
 */
proto.lorawan.MHDR.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.MHDR;
  return proto.lorawan.MHDR.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.MHDR} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.MHDR}
 */
proto.lorawan.MHDR.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lorawan.MType} */ (reader.readEnum());
      msg.setMType(value);
      break;
    case 2:
      var value = /** @type {!proto.lorawan.Major} */ (reader.readEnum());
      msg.setMajor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.MHDR.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.MHDR.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.MHDR} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.MHDR.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMajor();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional MType m_type = 1;
 * @return {!proto.lorawan.MType}
 */
proto.lorawan.MHDR.prototype.getMType = function() {
  return /** @type {!proto.lorawan.MType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.lorawan.MType} value */
proto.lorawan.MHDR.prototype.setMType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Major major = 2;
 * @return {!proto.lorawan.Major}
 */
proto.lorawan.MHDR.prototype.getMajor = function() {
  return /** @type {!proto.lorawan.Major} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.lorawan.Major} value */
proto.lorawan.MHDR.prototype.setMajor = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.MACPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lorawan.MACPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.MACPayload.displayName = 'proto.lorawan.MACPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.MACPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.MACPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.MACPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.MACPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    fHdr: (f = msg.getFHdr()) && proto.lorawan.FHDR.toObject(includeInstance, f),
    fPort: jspb.Message.getFieldWithDefault(msg, 2, 0),
    frmPayload: msg.getFrmPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.MACPayload}
 */
proto.lorawan.MACPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.MACPayload;
  return proto.lorawan.MACPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.MACPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.MACPayload}
 */
proto.lorawan.MACPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lorawan.FHDR;
      reader.readMessage(value,proto.lorawan.FHDR.deserializeBinaryFromReader);
      msg.setFHdr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFPort(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrmPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.MACPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.MACPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.MACPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.MACPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFHdr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lorawan.FHDR.serializeBinaryToWriter
    );
  }
  f = message.getFPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFrmPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional FHDR f_hdr = 1;
 * @return {?proto.lorawan.FHDR}
 */
proto.lorawan.MACPayload.prototype.getFHdr = function() {
  return /** @type{?proto.lorawan.FHDR} */ (
    jspb.Message.getWrapperField(this, proto.lorawan.FHDR, 1));
};


/** @param {?proto.lorawan.FHDR|undefined} value */
proto.lorawan.MACPayload.prototype.setFHdr = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lorawan.MACPayload.prototype.clearFHdr = function() {
  this.setFHdr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lorawan.MACPayload.prototype.hasFHdr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 f_port = 2;
 * @return {number}
 */
proto.lorawan.MACPayload.prototype.getFPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lorawan.MACPayload.prototype.setFPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes frm_payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.MACPayload.prototype.getFrmPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes frm_payload = 3;
 * This is a type-conversion wrapper around `getFrmPayload()`
 * @return {string}
 */
proto.lorawan.MACPayload.prototype.getFrmPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrmPayload()));
};


/**
 * optional bytes frm_payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrmPayload()`
 * @return {!Uint8Array}
 */
proto.lorawan.MACPayload.prototype.getFrmPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrmPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.MACPayload.prototype.setFrmPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.FHDR = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lorawan.FHDR.repeatedFields_, null);
};
goog.inherits(proto.lorawan.FHDR, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.FHDR.displayName = 'proto.lorawan.FHDR';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lorawan.FHDR.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.FHDR.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.FHDR.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.FHDR} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.FHDR.toObject = function(includeInstance, msg) {
  var f, obj = {
    devAddr: msg.getDevAddr_asB64(),
    fCtrl: (f = msg.getFCtrl()) && proto.lorawan.FCtrl.toObject(includeInstance, f),
    fCnt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fOptsList: jspb.Message.toObjectList(msg.getFOptsList(),
    proto.lorawan.MACCommand.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.FHDR}
 */
proto.lorawan.FHDR.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.FHDR;
  return proto.lorawan.FHDR.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.FHDR} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.FHDR}
 */
proto.lorawan.FHDR.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevAddr(value);
      break;
    case 2:
      var value = new proto.lorawan.FCtrl;
      reader.readMessage(value,proto.lorawan.FCtrl.deserializeBinaryFromReader);
      msg.setFCtrl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    case 4:
      var value = new proto.lorawan.MACCommand;
      reader.readMessage(value,proto.lorawan.MACCommand.deserializeBinaryFromReader);
      msg.addFOpts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.FHDR.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.FHDR.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.FHDR} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.FHDR.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFCtrl();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lorawan.FCtrl.serializeBinaryToWriter
    );
  }
  f = message.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getFOptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.lorawan.MACCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes dev_addr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.FHDR.prototype.getDevAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes dev_addr = 1;
 * This is a type-conversion wrapper around `getDevAddr()`
 * @return {string}
 */
proto.lorawan.FHDR.prototype.getDevAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevAddr()));
};


/**
 * optional bytes dev_addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevAddr()`
 * @return {!Uint8Array}
 */
proto.lorawan.FHDR.prototype.getDevAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.FHDR.prototype.setDevAddr = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional FCtrl f_ctrl = 2;
 * @return {?proto.lorawan.FCtrl}
 */
proto.lorawan.FHDR.prototype.getFCtrl = function() {
  return /** @type{?proto.lorawan.FCtrl} */ (
    jspb.Message.getWrapperField(this, proto.lorawan.FCtrl, 2));
};


/** @param {?proto.lorawan.FCtrl|undefined} value */
proto.lorawan.FHDR.prototype.setFCtrl = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.lorawan.FHDR.prototype.clearFCtrl = function() {
  this.setFCtrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lorawan.FHDR.prototype.hasFCtrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 f_cnt = 3;
 * @return {number}
 */
proto.lorawan.FHDR.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lorawan.FHDR.prototype.setFCnt = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated MACCommand f_opts = 4;
 * @return {!Array<!proto.lorawan.MACCommand>}
 */
proto.lorawan.FHDR.prototype.getFOptsList = function() {
  return /** @type{!Array<!proto.lorawan.MACCommand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lorawan.MACCommand, 4));
};


/** @param {!Array<!proto.lorawan.MACCommand>} value */
proto.lorawan.FHDR.prototype.setFOptsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.lorawan.MACCommand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lorawan.MACCommand}
 */
proto.lorawan.FHDR.prototype.addFOpts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.lorawan.MACCommand, opt_index);
};


proto.lorawan.FHDR.prototype.clearFOptsList = function() {
  this.setFOptsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.FCtrl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lorawan.FCtrl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.FCtrl.displayName = 'proto.lorawan.FCtrl';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.FCtrl.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.FCtrl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.FCtrl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.FCtrl.toObject = function(includeInstance, msg) {
  var f, obj = {
    adr: jspb.Message.getFieldWithDefault(msg, 1, false),
    adrAckReq: jspb.Message.getFieldWithDefault(msg, 2, false),
    ack: jspb.Message.getFieldWithDefault(msg, 3, false),
    fPending: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.FCtrl}
 */
proto.lorawan.FCtrl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.FCtrl;
  return proto.lorawan.FCtrl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.FCtrl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.FCtrl}
 */
proto.lorawan.FCtrl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdr(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdrAckReq(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAck(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFPending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.FCtrl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.FCtrl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.FCtrl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.FCtrl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdr();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAdrAckReq();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAck();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getFPending();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool adr = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lorawan.FCtrl.prototype.getAdr = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.lorawan.FCtrl.prototype.setAdr = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool adr_ack_req = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lorawan.FCtrl.prototype.getAdrAckReq = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.lorawan.FCtrl.prototype.setAdrAckReq = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool ack = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lorawan.FCtrl.prototype.getAck = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.lorawan.FCtrl.prototype.setAck = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool f_pending = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.lorawan.FCtrl.prototype.getFPending = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.lorawan.FCtrl.prototype.setFPending = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.MACCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lorawan.MACCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.MACCommand.displayName = 'proto.lorawan.MACCommand';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.MACCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.MACCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.MACCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.MACCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.MACCommand}
 */
proto.lorawan.MACCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.MACCommand;
  return proto.lorawan.MACCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.MACCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.MACCommand}
 */
proto.lorawan.MACCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.MACCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.MACCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.MACCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.MACCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 cid = 1;
 * @return {number}
 */
proto.lorawan.MACCommand.prototype.getCid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lorawan.MACCommand.prototype.setCid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.MACCommand.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.lorawan.MACCommand.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.lorawan.MACCommand.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.MACCommand.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.JoinRequestPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lorawan.JoinRequestPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.JoinRequestPayload.displayName = 'proto.lorawan.JoinRequestPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.JoinRequestPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.JoinRequestPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.JoinRequestPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.JoinRequestPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    appEui: msg.getAppEui_asB64(),
    devEui: msg.getDevEui_asB64(),
    devNonce: msg.getDevNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.JoinRequestPayload}
 */
proto.lorawan.JoinRequestPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.JoinRequestPayload;
  return proto.lorawan.JoinRequestPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.JoinRequestPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.JoinRequestPayload}
 */
proto.lorawan.JoinRequestPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppEui(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.JoinRequestPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.JoinRequestPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.JoinRequestPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.JoinRequestPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDevNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes app_eui = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.JoinRequestPayload.prototype.getAppEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes app_eui = 1;
 * This is a type-conversion wrapper around `getAppEui()`
 * @return {string}
 */
proto.lorawan.JoinRequestPayload.prototype.getAppEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppEui()));
};


/**
 * optional bytes app_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppEui()`
 * @return {!Uint8Array}
 */
proto.lorawan.JoinRequestPayload.prototype.getAppEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.JoinRequestPayload.prototype.setAppEui = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes dev_eui = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.JoinRequestPayload.prototype.getDevEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes dev_eui = 2;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.lorawan.JoinRequestPayload.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.lorawan.JoinRequestPayload.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.JoinRequestPayload.prototype.setDevEui = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes dev_nonce = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.JoinRequestPayload.prototype.getDevNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes dev_nonce = 3;
 * This is a type-conversion wrapper around `getDevNonce()`
 * @return {string}
 */
proto.lorawan.JoinRequestPayload.prototype.getDevNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevNonce()));
};


/**
 * optional bytes dev_nonce = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevNonce()`
 * @return {!Uint8Array}
 */
proto.lorawan.JoinRequestPayload.prototype.getDevNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.JoinRequestPayload.prototype.setDevNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.JoinAcceptPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lorawan.JoinAcceptPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.JoinAcceptPayload.displayName = 'proto.lorawan.JoinAcceptPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.JoinAcceptPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.JoinAcceptPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.JoinAcceptPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.JoinAcceptPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    encrypted: msg.getEncrypted_asB64(),
    appNonce: msg.getAppNonce_asB64(),
    netId: msg.getNetId_asB64(),
    devAddr: msg.getDevAddr_asB64(),
    dlSettings: (f = msg.getDlSettings()) && proto.lorawan.DLSettings.toObject(includeInstance, f),
    rxDelay: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cfList: (f = msg.getCfList()) && proto.lorawan.CFList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.JoinAcceptPayload}
 */
proto.lorawan.JoinAcceptPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.JoinAcceptPayload;
  return proto.lorawan.JoinAcceptPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.JoinAcceptPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.JoinAcceptPayload}
 */
proto.lorawan.JoinAcceptPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncrypted(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppNonce(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNetId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevAddr(value);
      break;
    case 5:
      var value = new proto.lorawan.DLSettings;
      reader.readMessage(value,proto.lorawan.DLSettings.deserializeBinaryFromReader);
      msg.setDlSettings(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxDelay(value);
      break;
    case 7:
      var value = new proto.lorawan.CFList;
      reader.readMessage(value,proto.lorawan.CFList.deserializeBinaryFromReader);
      msg.setCfList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.JoinAcceptPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.JoinAcceptPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.JoinAcceptPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.JoinAcceptPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncrypted_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAppNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getNetId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDevAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getDlSettings();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lorawan.DLSettings.serializeBinaryToWriter
    );
  }
  f = message.getRxDelay();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getCfList();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.lorawan.CFList.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes encrypted = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.JoinAcceptPayload.prototype.getEncrypted = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encrypted = 1;
 * This is a type-conversion wrapper around `getEncrypted()`
 * @return {string}
 */
proto.lorawan.JoinAcceptPayload.prototype.getEncrypted_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncrypted()));
};


/**
 * optional bytes encrypted = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncrypted()`
 * @return {!Uint8Array}
 */
proto.lorawan.JoinAcceptPayload.prototype.getEncrypted_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncrypted()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.JoinAcceptPayload.prototype.setEncrypted = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes app_nonce = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.JoinAcceptPayload.prototype.getAppNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes app_nonce = 2;
 * This is a type-conversion wrapper around `getAppNonce()`
 * @return {string}
 */
proto.lorawan.JoinAcceptPayload.prototype.getAppNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppNonce()));
};


/**
 * optional bytes app_nonce = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppNonce()`
 * @return {!Uint8Array}
 */
proto.lorawan.JoinAcceptPayload.prototype.getAppNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.JoinAcceptPayload.prototype.setAppNonce = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes net_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.JoinAcceptPayload.prototype.getNetId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes net_id = 3;
 * This is a type-conversion wrapper around `getNetId()`
 * @return {string}
 */
proto.lorawan.JoinAcceptPayload.prototype.getNetId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNetId()));
};


/**
 * optional bytes net_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNetId()`
 * @return {!Uint8Array}
 */
proto.lorawan.JoinAcceptPayload.prototype.getNetId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNetId()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.JoinAcceptPayload.prototype.setNetId = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes dev_addr = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lorawan.JoinAcceptPayload.prototype.getDevAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes dev_addr = 4;
 * This is a type-conversion wrapper around `getDevAddr()`
 * @return {string}
 */
proto.lorawan.JoinAcceptPayload.prototype.getDevAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevAddr()));
};


/**
 * optional bytes dev_addr = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevAddr()`
 * @return {!Uint8Array}
 */
proto.lorawan.JoinAcceptPayload.prototype.getDevAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevAddr()));
};


/** @param {!(string|Uint8Array)} value */
proto.lorawan.JoinAcceptPayload.prototype.setDevAddr = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional DLSettings dl_settings = 5;
 * @return {?proto.lorawan.DLSettings}
 */
proto.lorawan.JoinAcceptPayload.prototype.getDlSettings = function() {
  return /** @type{?proto.lorawan.DLSettings} */ (
    jspb.Message.getWrapperField(this, proto.lorawan.DLSettings, 5));
};


/** @param {?proto.lorawan.DLSettings|undefined} value */
proto.lorawan.JoinAcceptPayload.prototype.setDlSettings = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.lorawan.JoinAcceptPayload.prototype.clearDlSettings = function() {
  this.setDlSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lorawan.JoinAcceptPayload.prototype.hasDlSettings = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 rx_delay = 6;
 * @return {number}
 */
proto.lorawan.JoinAcceptPayload.prototype.getRxDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.lorawan.JoinAcceptPayload.prototype.setRxDelay = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional CFList cf_list = 7;
 * @return {?proto.lorawan.CFList}
 */
proto.lorawan.JoinAcceptPayload.prototype.getCfList = function() {
  return /** @type{?proto.lorawan.CFList} */ (
    jspb.Message.getWrapperField(this, proto.lorawan.CFList, 7));
};


/** @param {?proto.lorawan.CFList|undefined} value */
proto.lorawan.JoinAcceptPayload.prototype.setCfList = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.lorawan.JoinAcceptPayload.prototype.clearCfList = function() {
  this.setCfList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lorawan.JoinAcceptPayload.prototype.hasCfList = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.DLSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lorawan.DLSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.DLSettings.displayName = 'proto.lorawan.DLSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.DLSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.DLSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.DLSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.DLSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    rx1DrOffset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rx2Dr: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.DLSettings}
 */
proto.lorawan.DLSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.DLSettings;
  return proto.lorawan.DLSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.DLSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.DLSettings}
 */
proto.lorawan.DLSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRx1DrOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRx2Dr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.DLSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.DLSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.DLSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.DLSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRx1DrOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRx2Dr();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 rx1_dr_offset = 1;
 * @return {number}
 */
proto.lorawan.DLSettings.prototype.getRx1DrOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.lorawan.DLSettings.prototype.setRx1DrOffset = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 rx2_dr = 2;
 * @return {number}
 */
proto.lorawan.DLSettings.prototype.getRx2Dr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.lorawan.DLSettings.prototype.setRx2Dr = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lorawan.CFList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lorawan.CFList.repeatedFields_, null);
};
goog.inherits(proto.lorawan.CFList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lorawan.CFList.displayName = 'proto.lorawan.CFList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lorawan.CFList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lorawan.CFList.prototype.toObject = function(opt_includeInstance) {
  return proto.lorawan.CFList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lorawan.CFList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.CFList.toObject = function(includeInstance, msg) {
  var f, obj = {
    freqList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lorawan.CFList}
 */
proto.lorawan.CFList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lorawan.CFList;
  return proto.lorawan.CFList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lorawan.CFList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lorawan.CFList}
 */
proto.lorawan.CFList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setFreqList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lorawan.CFList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lorawan.CFList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lorawan.CFList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lorawan.CFList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFreqList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 freq = 1;
 * @return {!Array<number>}
 */
proto.lorawan.CFList.prototype.getFreqList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.lorawan.CFList.prototype.setFreqList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.lorawan.CFList.prototype.addFreq = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.lorawan.CFList.prototype.clearFreqList = function() {
  this.setFreqList([]);
};


/**
 * @enum {number}
 */
proto.lorawan.Modulation = {
  LORA: 0,
  FSK: 1
};

/**
 * @enum {number}
 */
proto.lorawan.FrequencyPlan = {
  EU_863_870: 0,
  US_902_928: 1,
  CN_779_787: 2,
  EU_433: 3,
  AU_915_928: 4,
  CN_470_510: 5,
  AS_923: 6,
  AS_920_923: 61,
  AS_923_925: 62,
  KR_920_923: 7,
  IN_865_867: 8,
  RU_864_870: 9
};

/**
 * @enum {number}
 */
proto.lorawan.Major = {
  LORAWAN_R1: 0
};

/**
 * @enum {number}
 */
proto.lorawan.MType = {
  JOIN_REQUEST: 0,
  JOIN_ACCEPT: 1,
  UNCONFIRMED_UP: 2,
  UNCONFIRMED_DOWN: 3,
  CONFIRMED_UP: 4,
  CONFIRMED_DOWN: 5
};

goog.object.extend(exports, proto.lorawan);
