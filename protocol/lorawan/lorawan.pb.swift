// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: github.com/TheThingsNetwork/api/protocol/lorawan/lorawan.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Lorawan_Modulation: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case lora // = 0
  case fsk // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .lora
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .lora
    case 1: self = .fsk
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .lora: return 0
    case .fsk: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

enum Lorawan_FrequencyPlan: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case eu863870 // = 0
  case us902928 // = 1
  case cn779787 // = 2
  case eu433 // = 3
  case au915928 // = 4
  case cn470510 // = 5
  case as923 // = 6
  case as920923 // = 61
  case as923925 // = 62
  case kr920923 // = 7
  case in865867 // = 8
  case ru864870 // = 9
  case UNRECOGNIZED(Int)

  init() {
    self = .eu863870
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .eu863870
    case 1: self = .us902928
    case 2: self = .cn779787
    case 3: self = .eu433
    case 4: self = .au915928
    case 5: self = .cn470510
    case 6: self = .as923
    case 7: self = .kr920923
    case 8: self = .in865867
    case 9: self = .ru864870
    case 61: self = .as920923
    case 62: self = .as923925
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .eu863870: return 0
    case .us902928: return 1
    case .cn779787: return 2
    case .eu433: return 3
    case .au915928: return 4
    case .cn470510: return 5
    case .as923: return 6
    case .kr920923: return 7
    case .in865867: return 8
    case .ru864870: return 9
    case .as920923: return 61
    case .as923925: return 62
    case .UNRECOGNIZED(let i): return i
    }
  }

}

enum Lorawan_Major: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case lorawanR1 // = 0
  case UNRECOGNIZED(Int)

  init() {
    self = .lorawanR1
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .lorawanR1
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .lorawanR1: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

enum Lorawan_MType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case joinRequest // = 0
  case joinAccept // = 1
  case unconfirmedUp // = 2
  case unconfirmedDown // = 3
  case confirmedUp // = 4
  case confirmedDown // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .joinRequest
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .joinRequest
    case 1: self = .joinAccept
    case 2: self = .unconfirmedUp
    case 3: self = .unconfirmedDown
    case 4: self = .confirmedUp
    case 5: self = .confirmedDown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .joinRequest: return 0
    case .joinAccept: return 1
    case .unconfirmedUp: return 2
    case .unconfirmedDown: return 3
    case .confirmedUp: return 4
    case .confirmedDown: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Lorawan_Metadata: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Metadata"

  var modulation: Lorawan_Modulation = .lora

  /// LoRa data rate - SF{spreadingfactor}BW{bandwidth}
  var dataRate: String = String()

  /// FSK bit rate in bit/s
  var bitRate: UInt32 = 0

  /// LoRa coding rate
  var codingRate: String = String()

  /// Store the full 32 bit FCnt (deprecated; do not use)
  var fCnt: UInt32 = 0

  var frequencyPlan: Lorawan_FrequencyPlan = .eu863870

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 11: try decoder.decodeSingularEnumField(value: &self.modulation)
      case 12: try decoder.decodeSingularStringField(value: &self.dataRate)
      case 13: try decoder.decodeSingularUInt32Field(value: &self.bitRate)
      case 14: try decoder.decodeSingularStringField(value: &self.codingRate)
      case 15: try decoder.decodeSingularUInt32Field(value: &self.fCnt)
      case 16: try decoder.decodeSingularEnumField(value: &self.frequencyPlan)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.modulation != .lora {
      try visitor.visitSingularEnumField(value: self.modulation, fieldNumber: 11)
    }
    if !self.dataRate.isEmpty {
      try visitor.visitSingularStringField(value: self.dataRate, fieldNumber: 12)
    }
    if self.bitRate != 0 {
      try visitor.visitSingularUInt32Field(value: self.bitRate, fieldNumber: 13)
    }
    if !self.codingRate.isEmpty {
      try visitor.visitSingularStringField(value: self.codingRate, fieldNumber: 14)
    }
    if self.fCnt != 0 {
      try visitor.visitSingularUInt32Field(value: self.fCnt, fieldNumber: 15)
    }
    if self.frequencyPlan != .eu863870 {
      try visitor.visitSingularEnumField(value: self.frequencyPlan, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lorawan_TxConfiguration: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TxConfiguration"

  var modulation: Lorawan_Modulation = .lora

  /// LoRa data rate - SF{spreadingfactor}BW{bandwidth}
  var dataRate: String = String()

  /// FSK bit rate in bit/s
  var bitRate: UInt32 = 0

  /// LoRa coding rate
  var codingRate: String = String()

  /// Store the full 32 bit FCnt (deprecated; do not use)
  var fCnt: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 11: try decoder.decodeSingularEnumField(value: &self.modulation)
      case 12: try decoder.decodeSingularStringField(value: &self.dataRate)
      case 13: try decoder.decodeSingularUInt32Field(value: &self.bitRate)
      case 14: try decoder.decodeSingularStringField(value: &self.codingRate)
      case 15: try decoder.decodeSingularUInt32Field(value: &self.fCnt)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.modulation != .lora {
      try visitor.visitSingularEnumField(value: self.modulation, fieldNumber: 11)
    }
    if !self.dataRate.isEmpty {
      try visitor.visitSingularStringField(value: self.dataRate, fieldNumber: 12)
    }
    if self.bitRate != 0 {
      try visitor.visitSingularUInt32Field(value: self.bitRate, fieldNumber: 13)
    }
    if !self.codingRate.isEmpty {
      try visitor.visitSingularStringField(value: self.codingRate, fieldNumber: 14)
    }
    if self.fCnt != 0 {
      try visitor.visitSingularUInt32Field(value: self.fCnt, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lorawan_ActivationMetadata: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ActivationMetadata"

  var appEui: Data {
    get {return _storage._appEui}
    set {_uniqueStorage()._appEui = newValue}
  }

  var devEui: Data {
    get {return _storage._devEui}
    set {_uniqueStorage()._devEui = newValue}
  }

  var devAddr: Data {
    get {return _storage._devAddr}
    set {_uniqueStorage()._devAddr = newValue}
  }

  var nwkSKey: Data {
    get {return _storage._nwkSKey}
    set {_uniqueStorage()._nwkSKey = newValue}
  }

  var rx1DrOffset: UInt32 {
    get {return _storage._rx1DrOffset}
    set {_uniqueStorage()._rx1DrOffset = newValue}
  }

  var rx2Dr: UInt32 {
    get {return _storage._rx2Dr}
    set {_uniqueStorage()._rx2Dr = newValue}
  }

  var rxDelay: UInt32 {
    get {return _storage._rxDelay}
    set {_uniqueStorage()._rxDelay = newValue}
  }

  var cfList: Lorawan_CFList {
    get {return _storage._cfList ?? Lorawan_CFList()}
    set {_uniqueStorage()._cfList = newValue}
  }
  /// Returns true if `cfList` has been explicitly set.
  var hasCfList: Bool {return _storage._cfList != nil}
  /// Clears the value of `cfList`. Subsequent reads from it will return its default value.
  mutating func clearCfList() {_storage._cfList = nil}

  var frequencyPlan: Lorawan_FrequencyPlan {
    get {return _storage._frequencyPlan}
    set {_uniqueStorage()._frequencyPlan = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._appEui)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._devEui)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._devAddr)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._nwkSKey)
        case 11: try decoder.decodeSingularUInt32Field(value: &_storage._rx1DrOffset)
        case 12: try decoder.decodeSingularUInt32Field(value: &_storage._rx2Dr)
        case 13: try decoder.decodeSingularUInt32Field(value: &_storage._rxDelay)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._cfList)
        case 15: try decoder.decodeSingularEnumField(value: &_storage._frequencyPlan)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._appEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appEui, fieldNumber: 1)
      }
      if !_storage._devEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._devEui, fieldNumber: 2)
      }
      if !_storage._devAddr.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._devAddr, fieldNumber: 3)
      }
      if !_storage._nwkSKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._nwkSKey, fieldNumber: 4)
      }
      if _storage._rx1DrOffset != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rx1DrOffset, fieldNumber: 11)
      }
      if _storage._rx2Dr != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rx2Dr, fieldNumber: 12)
      }
      if _storage._rxDelay != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rxDelay, fieldNumber: 13)
      }
      if let v = _storage._cfList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if _storage._frequencyPlan != .eu863870 {
        try visitor.visitSingularEnumField(value: _storage._frequencyPlan, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lorawan_Message: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Message"

  var mHdr: Lorawan_MHDR {
    get {return _storage._mHdr ?? Lorawan_MHDR()}
    set {_uniqueStorage()._mHdr = newValue}
  }
  /// Returns true if `mHdr` has been explicitly set.
  var hasMHdr: Bool {return _storage._mHdr != nil}
  /// Clears the value of `mHdr`. Subsequent reads from it will return its default value.
  mutating func clearMHdr() {_storage._mHdr = nil}

  var mic: Data {
    get {return _storage._mic}
    set {_uniqueStorage()._mic = newValue}
  }

  var payload: OneOf_Payload? {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var macPayload: Lorawan_MACPayload {
    get {
      if case .macPayload(let v)? = _storage._payload {return v}
      return Lorawan_MACPayload()
    }
    set {_uniqueStorage()._payload = .macPayload(newValue)}
  }

  var joinRequestPayload: Lorawan_JoinRequestPayload {
    get {
      if case .joinRequestPayload(let v)? = _storage._payload {return v}
      return Lorawan_JoinRequestPayload()
    }
    set {_uniqueStorage()._payload = .joinRequestPayload(newValue)}
  }

  var joinAcceptPayload: Lorawan_JoinAcceptPayload {
    get {
      if case .joinAcceptPayload(let v)? = _storage._payload {return v}
      return Lorawan_JoinAcceptPayload()
    }
    set {_uniqueStorage()._payload = .joinAcceptPayload(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case macPayload(Lorawan_MACPayload)
    case joinRequestPayload(Lorawan_JoinRequestPayload)
    case joinAcceptPayload(Lorawan_JoinAcceptPayload)

    static func ==(lhs: Lorawan_Message.OneOf_Payload, rhs: Lorawan_Message.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.macPayload(let l), .macPayload(let r)): return l == r
      case (.joinRequestPayload(let l), .joinRequestPayload(let r)): return l == r
      case (.joinAcceptPayload(let l), .joinAcceptPayload(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mHdr)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._mic)
        case 3:
          var v: Lorawan_MACPayload?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .macPayload(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .macPayload(v)}
        case 4:
          var v: Lorawan_JoinRequestPayload?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .joinRequestPayload(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .joinRequestPayload(v)}
        case 5:
          var v: Lorawan_JoinAcceptPayload?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .joinAcceptPayload(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .joinAcceptPayload(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mHdr {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._mic.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._mic, fieldNumber: 2)
      }
      switch _storage._payload {
      case .macPayload(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .joinRequestPayload(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .joinAcceptPayload(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lorawan_MHDR: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".MHDR"

  var mType: Lorawan_MType = .joinRequest

  var major: Lorawan_Major = .lorawanR1

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.mType)
      case 2: try decoder.decodeSingularEnumField(value: &self.major)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mType != .joinRequest {
      try visitor.visitSingularEnumField(value: self.mType, fieldNumber: 1)
    }
    if self.major != .lorawanR1 {
      try visitor.visitSingularEnumField(value: self.major, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lorawan_MACPayload: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".MACPayload"

  var fHdr: Lorawan_FHDR {
    get {return _storage._fHdr ?? Lorawan_FHDR()}
    set {_uniqueStorage()._fHdr = newValue}
  }
  /// Returns true if `fHdr` has been explicitly set.
  var hasFHdr: Bool {return _storage._fHdr != nil}
  /// Clears the value of `fHdr`. Subsequent reads from it will return its default value.
  mutating func clearFHdr() {_storage._fHdr = nil}

  var fPort: Int32 {
    get {return _storage._fPort}
    set {_uniqueStorage()._fPort = newValue}
  }

  var frmPayload: Data {
    get {return _storage._frmPayload}
    set {_uniqueStorage()._frmPayload = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._fHdr)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._fPort)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._frmPayload)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._fHdr {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._fPort != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fPort, fieldNumber: 2)
      }
      if !_storage._frmPayload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._frmPayload, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lorawan_FHDR: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FHDR"

  var devAddr: Data {
    get {return _storage._devAddr}
    set {_uniqueStorage()._devAddr = newValue}
  }

  var fCtrl: Lorawan_FCtrl {
    get {return _storage._fCtrl ?? Lorawan_FCtrl()}
    set {_uniqueStorage()._fCtrl = newValue}
  }
  /// Returns true if `fCtrl` has been explicitly set.
  var hasFCtrl: Bool {return _storage._fCtrl != nil}
  /// Clears the value of `fCtrl`. Subsequent reads from it will return its default value.
  mutating func clearFCtrl() {_storage._fCtrl = nil}

  var fCnt: UInt32 {
    get {return _storage._fCnt}
    set {_uniqueStorage()._fCnt = newValue}
  }

  var fOpts: [Lorawan_MACCommand] {
    get {return _storage._fOpts}
    set {_uniqueStorage()._fOpts = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._devAddr)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._fCtrl)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._fCnt)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._fOpts)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._devAddr.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._devAddr, fieldNumber: 1)
      }
      if let v = _storage._fCtrl {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._fCnt != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._fCnt, fieldNumber: 3)
      }
      if !_storage._fOpts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._fOpts, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lorawan_FCtrl: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FCtrl"

  var adr: Bool = false

  var adrAckReq: Bool = false

  var ack: Bool = false

  var fPending: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.adr)
      case 2: try decoder.decodeSingularBoolField(value: &self.adrAckReq)
      case 3: try decoder.decodeSingularBoolField(value: &self.ack)
      case 4: try decoder.decodeSingularBoolField(value: &self.fPending)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.adr != false {
      try visitor.visitSingularBoolField(value: self.adr, fieldNumber: 1)
    }
    if self.adrAckReq != false {
      try visitor.visitSingularBoolField(value: self.adrAckReq, fieldNumber: 2)
    }
    if self.ack != false {
      try visitor.visitSingularBoolField(value: self.ack, fieldNumber: 3)
    }
    if self.fPending != false {
      try visitor.visitSingularBoolField(value: self.fPending, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lorawan_MACCommand: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".MACCommand"

  var cid: UInt32 = 0

  var payload: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.cid)
      case 2: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cid != 0 {
      try visitor.visitSingularUInt32Field(value: self.cid, fieldNumber: 1)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lorawan_JoinRequestPayload: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".JoinRequestPayload"

  var appEui: Data = SwiftProtobuf.Internal.emptyData

  var devEui: Data = SwiftProtobuf.Internal.emptyData

  var devNonce: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.appEui)
      case 2: try decoder.decodeSingularBytesField(value: &self.devEui)
      case 3: try decoder.decodeSingularBytesField(value: &self.devNonce)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appEui.isEmpty {
      try visitor.visitSingularBytesField(value: self.appEui, fieldNumber: 1)
    }
    if !self.devEui.isEmpty {
      try visitor.visitSingularBytesField(value: self.devEui, fieldNumber: 2)
    }
    if !self.devNonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.devNonce, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lorawan_JoinAcceptPayload: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".JoinAcceptPayload"

  var encrypted: Data {
    get {return _storage._encrypted}
    set {_uniqueStorage()._encrypted = newValue}
  }

  var appNonce: Data {
    get {return _storage._appNonce}
    set {_uniqueStorage()._appNonce = newValue}
  }

  var netID: Data {
    get {return _storage._netID}
    set {_uniqueStorage()._netID = newValue}
  }

  var devAddr: Data {
    get {return _storage._devAddr}
    set {_uniqueStorage()._devAddr = newValue}
  }

  var dlSettings: Lorawan_DLSettings {
    get {return _storage._dlSettings ?? Lorawan_DLSettings()}
    set {_uniqueStorage()._dlSettings = newValue}
  }
  /// Returns true if `dlSettings` has been explicitly set.
  var hasDlSettings: Bool {return _storage._dlSettings != nil}
  /// Clears the value of `dlSettings`. Subsequent reads from it will return its default value.
  mutating func clearDlSettings() {_storage._dlSettings = nil}

  var rxDelay: UInt32 {
    get {return _storage._rxDelay}
    set {_uniqueStorage()._rxDelay = newValue}
  }

  var cfList: Lorawan_CFList {
    get {return _storage._cfList ?? Lorawan_CFList()}
    set {_uniqueStorage()._cfList = newValue}
  }
  /// Returns true if `cfList` has been explicitly set.
  var hasCfList: Bool {return _storage._cfList != nil}
  /// Clears the value of `cfList`. Subsequent reads from it will return its default value.
  mutating func clearCfList() {_storage._cfList = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._encrypted)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._appNonce)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._netID)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._devAddr)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._dlSettings)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._rxDelay)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._cfList)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._encrypted.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._encrypted, fieldNumber: 1)
      }
      if !_storage._appNonce.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appNonce, fieldNumber: 2)
      }
      if !_storage._netID.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._netID, fieldNumber: 3)
      }
      if !_storage._devAddr.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._devAddr, fieldNumber: 4)
      }
      if let v = _storage._dlSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._rxDelay != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rxDelay, fieldNumber: 6)
      }
      if let v = _storage._cfList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Lorawan_DLSettings: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DLSettings"

  var rx1DrOffset: UInt32 = 0

  var rx2Dr: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.rx1DrOffset)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.rx2Dr)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rx1DrOffset != 0 {
      try visitor.visitSingularUInt32Field(value: self.rx1DrOffset, fieldNumber: 1)
    }
    if self.rx2Dr != 0 {
      try visitor.visitSingularUInt32Field(value: self.rx2Dr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Lorawan_CFList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".CFList"

  var freq: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.freq)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.freq.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.freq, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lorawan"

extension Lorawan_Modulation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LORA"),
    1: .same(proto: "FSK"),
  ]
}

extension Lorawan_FrequencyPlan: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EU_863_870"),
    1: .same(proto: "US_902_928"),
    2: .same(proto: "CN_779_787"),
    3: .same(proto: "EU_433"),
    4: .same(proto: "AU_915_928"),
    5: .same(proto: "CN_470_510"),
    6: .same(proto: "AS_923"),
    7: .same(proto: "KR_920_923"),
    8: .same(proto: "IN_865_867"),
    9: .same(proto: "RU_864_870"),
    61: .same(proto: "AS_920_923"),
    62: .same(proto: "AS_923_925"),
  ]
}

extension Lorawan_Major: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LORAWAN_R1"),
  ]
}

extension Lorawan_MType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOIN_REQUEST"),
    1: .same(proto: "JOIN_ACCEPT"),
    2: .same(proto: "UNCONFIRMED_UP"),
    3: .same(proto: "UNCONFIRMED_DOWN"),
    4: .same(proto: "CONFIRMED_UP"),
    5: .same(proto: "CONFIRMED_DOWN"),
  ]
}

extension Lorawan_Metadata: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .same(proto: "modulation"),
    12: .standard(proto: "data_rate"),
    13: .standard(proto: "bit_rate"),
    14: .standard(proto: "coding_rate"),
    15: .standard(proto: "f_cnt"),
    16: .standard(proto: "frequency_plan"),
  ]

  func _protobuf_generated_isEqualTo(other: Lorawan_Metadata) -> Bool {
    if self.modulation != other.modulation {return false}
    if self.dataRate != other.dataRate {return false}
    if self.bitRate != other.bitRate {return false}
    if self.codingRate != other.codingRate {return false}
    if self.fCnt != other.fCnt {return false}
    if self.frequencyPlan != other.frequencyPlan {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_TxConfiguration: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .same(proto: "modulation"),
    12: .standard(proto: "data_rate"),
    13: .standard(proto: "bit_rate"),
    14: .standard(proto: "coding_rate"),
    15: .standard(proto: "f_cnt"),
  ]

  func _protobuf_generated_isEqualTo(other: Lorawan_TxConfiguration) -> Bool {
    if self.modulation != other.modulation {return false}
    if self.dataRate != other.dataRate {return false}
    if self.bitRate != other.bitRate {return false}
    if self.codingRate != other.codingRate {return false}
    if self.fCnt != other.fCnt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_ActivationMetadata: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_eui"),
    2: .standard(proto: "dev_eui"),
    3: .standard(proto: "dev_addr"),
    4: .standard(proto: "nwk_s_key"),
    11: .standard(proto: "rx1_dr_offset"),
    12: .standard(proto: "rx2_dr"),
    13: .standard(proto: "rx_delay"),
    14: .standard(proto: "cf_list"),
    15: .standard(proto: "frequency_plan"),
  ]

  fileprivate class _StorageClass {
    var _appEui: Data = SwiftProtobuf.Internal.emptyData
    var _devEui: Data = SwiftProtobuf.Internal.emptyData
    var _devAddr: Data = SwiftProtobuf.Internal.emptyData
    var _nwkSKey: Data = SwiftProtobuf.Internal.emptyData
    var _rx1DrOffset: UInt32 = 0
    var _rx2Dr: UInt32 = 0
    var _rxDelay: UInt32 = 0
    var _cfList: Lorawan_CFList? = nil
    var _frequencyPlan: Lorawan_FrequencyPlan = .eu863870

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _appEui = source._appEui
      _devEui = source._devEui
      _devAddr = source._devAddr
      _nwkSKey = source._nwkSKey
      _rx1DrOffset = source._rx1DrOffset
      _rx2Dr = source._rx2Dr
      _rxDelay = source._rxDelay
      _cfList = source._cfList
      _frequencyPlan = source._frequencyPlan
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lorawan_ActivationMetadata) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._appEui != other_storage._appEui {return false}
        if _storage._devEui != other_storage._devEui {return false}
        if _storage._devAddr != other_storage._devAddr {return false}
        if _storage._nwkSKey != other_storage._nwkSKey {return false}
        if _storage._rx1DrOffset != other_storage._rx1DrOffset {return false}
        if _storage._rx2Dr != other_storage._rx2Dr {return false}
        if _storage._rxDelay != other_storage._rxDelay {return false}
        if _storage._cfList != other_storage._cfList {return false}
        if _storage._frequencyPlan != other_storage._frequencyPlan {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_hdr"),
    2: .same(proto: "mic"),
    3: .standard(proto: "mac_payload"),
    4: .standard(proto: "join_request_payload"),
    5: .standard(proto: "join_accept_payload"),
  ]

  fileprivate class _StorageClass {
    var _mHdr: Lorawan_MHDR? = nil
    var _mic: Data = SwiftProtobuf.Internal.emptyData
    var _payload: Lorawan_Message.OneOf_Payload?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mHdr = source._mHdr
      _mic = source._mic
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lorawan_Message) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._mHdr != other_storage._mHdr {return false}
        if _storage._mic != other_storage._mic {return false}
        if _storage._payload != other_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_MHDR: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "m_type"),
    2: .same(proto: "major"),
  ]

  func _protobuf_generated_isEqualTo(other: Lorawan_MHDR) -> Bool {
    if self.mType != other.mType {return false}
    if self.major != other.major {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_MACPayload: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "f_hdr"),
    2: .standard(proto: "f_port"),
    3: .standard(proto: "frm_payload"),
  ]

  fileprivate class _StorageClass {
    var _fHdr: Lorawan_FHDR? = nil
    var _fPort: Int32 = 0
    var _frmPayload: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _fHdr = source._fHdr
      _fPort = source._fPort
      _frmPayload = source._frmPayload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lorawan_MACPayload) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._fHdr != other_storage._fHdr {return false}
        if _storage._fPort != other_storage._fPort {return false}
        if _storage._frmPayload != other_storage._frmPayload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_FHDR: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dev_addr"),
    2: .standard(proto: "f_ctrl"),
    3: .standard(proto: "f_cnt"),
    4: .standard(proto: "f_opts"),
  ]

  fileprivate class _StorageClass {
    var _devAddr: Data = SwiftProtobuf.Internal.emptyData
    var _fCtrl: Lorawan_FCtrl? = nil
    var _fCnt: UInt32 = 0
    var _fOpts: [Lorawan_MACCommand] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _devAddr = source._devAddr
      _fCtrl = source._fCtrl
      _fCnt = source._fCnt
      _fOpts = source._fOpts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lorawan_FHDR) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._devAddr != other_storage._devAddr {return false}
        if _storage._fCtrl != other_storage._fCtrl {return false}
        if _storage._fCnt != other_storage._fCnt {return false}
        if _storage._fOpts != other_storage._fOpts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_FCtrl: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "adr"),
    2: .standard(proto: "adr_ack_req"),
    3: .same(proto: "ack"),
    4: .standard(proto: "f_pending"),
  ]

  func _protobuf_generated_isEqualTo(other: Lorawan_FCtrl) -> Bool {
    if self.adr != other.adr {return false}
    if self.adrAckReq != other.adrAckReq {return false}
    if self.ack != other.ack {return false}
    if self.fPending != other.fPending {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_MACCommand: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cid"),
    2: .same(proto: "payload"),
  ]

  func _protobuf_generated_isEqualTo(other: Lorawan_MACCommand) -> Bool {
    if self.cid != other.cid {return false}
    if self.payload != other.payload {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_JoinRequestPayload: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_eui"),
    2: .standard(proto: "dev_eui"),
    3: .standard(proto: "dev_nonce"),
  ]

  func _protobuf_generated_isEqualTo(other: Lorawan_JoinRequestPayload) -> Bool {
    if self.appEui != other.appEui {return false}
    if self.devEui != other.devEui {return false}
    if self.devNonce != other.devNonce {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_JoinAcceptPayload: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encrypted"),
    2: .standard(proto: "app_nonce"),
    3: .standard(proto: "net_id"),
    4: .standard(proto: "dev_addr"),
    5: .standard(proto: "dl_settings"),
    6: .standard(proto: "rx_delay"),
    7: .standard(proto: "cf_list"),
  ]

  fileprivate class _StorageClass {
    var _encrypted: Data = SwiftProtobuf.Internal.emptyData
    var _appNonce: Data = SwiftProtobuf.Internal.emptyData
    var _netID: Data = SwiftProtobuf.Internal.emptyData
    var _devAddr: Data = SwiftProtobuf.Internal.emptyData
    var _dlSettings: Lorawan_DLSettings? = nil
    var _rxDelay: UInt32 = 0
    var _cfList: Lorawan_CFList? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _encrypted = source._encrypted
      _appNonce = source._appNonce
      _netID = source._netID
      _devAddr = source._devAddr
      _dlSettings = source._dlSettings
      _rxDelay = source._rxDelay
      _cfList = source._cfList
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Lorawan_JoinAcceptPayload) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._encrypted != other_storage._encrypted {return false}
        if _storage._appNonce != other_storage._appNonce {return false}
        if _storage._netID != other_storage._netID {return false}
        if _storage._devAddr != other_storage._devAddr {return false}
        if _storage._dlSettings != other_storage._dlSettings {return false}
        if _storage._rxDelay != other_storage._rxDelay {return false}
        if _storage._cfList != other_storage._cfList {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_DLSettings: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rx1_dr_offset"),
    2: .standard(proto: "rx2_dr"),
  ]

  func _protobuf_generated_isEqualTo(other: Lorawan_DLSettings) -> Bool {
    if self.rx1DrOffset != other.rx1DrOffset {return false}
    if self.rx2Dr != other.rx2Dr {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Lorawan_CFList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "freq"),
  ]

  func _protobuf_generated_isEqualTo(other: Lorawan_CFList) -> Bool {
    if self.freq != other.freq {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
