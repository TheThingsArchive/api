// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/TheThingsNetwork/api/monitor/monitor.proto

package org.thethingsnetwork.api.monitor;

/**
 * Protobuf type {@code monitor.LogMessage}
 */
public  final class LogMessage extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:monitor.LogMessage)
    LogMessageOrBuilder {
  // Use LogMessage.newBuilder() to construct.
  private LogMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LogMessage() {
    level_ = 0;
    message_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private LogMessage(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.google.protobuf.Timestamp.Builder subBuilder = null;
            if (time_ != null) {
              subBuilder = time_.toBuilder();
            }
            time_ = input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(time_);
              time_ = subBuilder.buildPartial();
            }

            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            level_ = rawValue;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            message_ = s;
            break;
          }
          case 34: {
            com.google.protobuf.Struct.Builder subBuilder = null;
            if (fields_ != null) {
              subBuilder = fields_.toBuilder();
            }
            fields_ = input.readMessage(com.google.protobuf.Struct.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fields_);
              fields_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.thethingsnetwork.api.monitor.MonitorProto.internal_static_monitor_LogMessage_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.thethingsnetwork.api.monitor.MonitorProto.internal_static_monitor_LogMessage_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.thethingsnetwork.api.monitor.LogMessage.class, org.thethingsnetwork.api.monitor.LogMessage.Builder.class);
  }

  public static final int TIME_FIELD_NUMBER = 1;
  private com.google.protobuf.Timestamp time_;
  /**
   * <pre>
   * Timestamp of the log message. Will be filled by the server if empty.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
   */
  public boolean hasTime() {
    return time_ != null;
  }
  /**
   * <pre>
   * Timestamp of the log message. Will be filled by the server if empty.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
   */
  public com.google.protobuf.Timestamp getTime() {
    return time_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : time_;
  }
  /**
   * <pre>
   * Timestamp of the log message. Will be filled by the server if empty.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
   */
  public com.google.protobuf.TimestampOrBuilder getTimeOrBuilder() {
    return getTime();
  }

  public static final int LEVEL_FIELD_NUMBER = 2;
  private int level_;
  /**
   * <pre>
   * The log level
   * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
   * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
   * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
   * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
   * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
   * </pre>
   *
   * <code>.monitor.Level level = 2;</code>
   */
  public int getLevelValue() {
    return level_;
  }
  /**
   * <pre>
   * The log level
   * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
   * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
   * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
   * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
   * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
   * </pre>
   *
   * <code>.monitor.Level level = 2;</code>
   */
  public org.thethingsnetwork.api.monitor.Level getLevel() {
    org.thethingsnetwork.api.monitor.Level result = org.thethingsnetwork.api.monitor.Level.valueOf(level_);
    return result == null ? org.thethingsnetwork.api.monitor.Level.UNRECOGNIZED : result;
  }

  public static final int MESSAGE_FIELD_NUMBER = 3;
  private volatile java.lang.Object message_;
  /**
   * <pre>
   * The log message is a short description of what's happening.
   * - Log messages are full sentences that start with a capital letter.
   * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
   * - Log messages do generally not end with a period (for example: "Connected to database").
   * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
   * </pre>
   *
   * <code>string message = 3;</code>
   */
  public java.lang.String getMessage() {
    java.lang.Object ref = message_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      message_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The log message is a short description of what's happening.
   * - Log messages are full sentences that start with a capital letter.
   * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
   * - Log messages do generally not end with a period (for example: "Connected to database").
   * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
   * </pre>
   *
   * <code>string message = 3;</code>
   */
  public com.google.protobuf.ByteString
      getMessageBytes() {
    java.lang.Object ref = message_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      message_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FIELDS_FIELD_NUMBER = 4;
  private com.google.protobuf.Struct fields_;
  /**
   * <pre>
   * Structured log fields allow analyses
   * - Add fields that are informative
   * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
   * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
   * - Log field names use PascalCase
   * </pre>
   *
   * <code>.google.protobuf.Struct fields = 4;</code>
   */
  public boolean hasFields() {
    return fields_ != null;
  }
  /**
   * <pre>
   * Structured log fields allow analyses
   * - Add fields that are informative
   * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
   * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
   * - Log field names use PascalCase
   * </pre>
   *
   * <code>.google.protobuf.Struct fields = 4;</code>
   */
  public com.google.protobuf.Struct getFields() {
    return fields_ == null ? com.google.protobuf.Struct.getDefaultInstance() : fields_;
  }
  /**
   * <pre>
   * Structured log fields allow analyses
   * - Add fields that are informative
   * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
   * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
   * - Log field names use PascalCase
   * </pre>
   *
   * <code>.google.protobuf.Struct fields = 4;</code>
   */
  public com.google.protobuf.StructOrBuilder getFieldsOrBuilder() {
    return getFields();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (time_ != null) {
      output.writeMessage(1, getTime());
    }
    if (level_ != org.thethingsnetwork.api.monitor.Level.DEBUG.getNumber()) {
      output.writeEnum(2, level_);
    }
    if (!getMessageBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, message_);
    }
    if (fields_ != null) {
      output.writeMessage(4, getFields());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (time_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTime());
    }
    if (level_ != org.thethingsnetwork.api.monitor.Level.DEBUG.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, level_);
    }
    if (!getMessageBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, message_);
    }
    if (fields_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getFields());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.thethingsnetwork.api.monitor.LogMessage)) {
      return super.equals(obj);
    }
    org.thethingsnetwork.api.monitor.LogMessage other = (org.thethingsnetwork.api.monitor.LogMessage) obj;

    boolean result = true;
    result = result && (hasTime() == other.hasTime());
    if (hasTime()) {
      result = result && getTime()
          .equals(other.getTime());
    }
    result = result && level_ == other.level_;
    result = result && getMessage()
        .equals(other.getMessage());
    result = result && (hasFields() == other.hasFields());
    if (hasFields()) {
      result = result && getFields()
          .equals(other.getFields());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasTime()) {
      hash = (37 * hash) + TIME_FIELD_NUMBER;
      hash = (53 * hash) + getTime().hashCode();
    }
    hash = (37 * hash) + LEVEL_FIELD_NUMBER;
    hash = (53 * hash) + level_;
    hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
    hash = (53 * hash) + getMessage().hashCode();
    if (hasFields()) {
      hash = (37 * hash) + FIELDS_FIELD_NUMBER;
      hash = (53 * hash) + getFields().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.thethingsnetwork.api.monitor.LogMessage parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.thethingsnetwork.api.monitor.LogMessage parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.thethingsnetwork.api.monitor.LogMessage prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code monitor.LogMessage}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:monitor.LogMessage)
      org.thethingsnetwork.api.monitor.LogMessageOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.thethingsnetwork.api.monitor.MonitorProto.internal_static_monitor_LogMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.thethingsnetwork.api.monitor.MonitorProto.internal_static_monitor_LogMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.thethingsnetwork.api.monitor.LogMessage.class, org.thethingsnetwork.api.monitor.LogMessage.Builder.class);
    }

    // Construct using org.thethingsnetwork.api.monitor.LogMessage.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (timeBuilder_ == null) {
        time_ = null;
      } else {
        time_ = null;
        timeBuilder_ = null;
      }
      level_ = 0;

      message_ = "";

      if (fieldsBuilder_ == null) {
        fields_ = null;
      } else {
        fields_ = null;
        fieldsBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.thethingsnetwork.api.monitor.MonitorProto.internal_static_monitor_LogMessage_descriptor;
    }

    public org.thethingsnetwork.api.monitor.LogMessage getDefaultInstanceForType() {
      return org.thethingsnetwork.api.monitor.LogMessage.getDefaultInstance();
    }

    public org.thethingsnetwork.api.monitor.LogMessage build() {
      org.thethingsnetwork.api.monitor.LogMessage result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.thethingsnetwork.api.monitor.LogMessage buildPartial() {
      org.thethingsnetwork.api.monitor.LogMessage result = new org.thethingsnetwork.api.monitor.LogMessage(this);
      if (timeBuilder_ == null) {
        result.time_ = time_;
      } else {
        result.time_ = timeBuilder_.build();
      }
      result.level_ = level_;
      result.message_ = message_;
      if (fieldsBuilder_ == null) {
        result.fields_ = fields_;
      } else {
        result.fields_ = fieldsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.thethingsnetwork.api.monitor.LogMessage) {
        return mergeFrom((org.thethingsnetwork.api.monitor.LogMessage)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.thethingsnetwork.api.monitor.LogMessage other) {
      if (other == org.thethingsnetwork.api.monitor.LogMessage.getDefaultInstance()) return this;
      if (other.hasTime()) {
        mergeTime(other.getTime());
      }
      if (other.level_ != 0) {
        setLevelValue(other.getLevelValue());
      }
      if (!other.getMessage().isEmpty()) {
        message_ = other.message_;
        onChanged();
      }
      if (other.hasFields()) {
        mergeFields(other.getFields());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.thethingsnetwork.api.monitor.LogMessage parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.thethingsnetwork.api.monitor.LogMessage) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.google.protobuf.Timestamp time_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> timeBuilder_;
    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    public boolean hasTime() {
      return timeBuilder_ != null || time_ != null;
    }
    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    public com.google.protobuf.Timestamp getTime() {
      if (timeBuilder_ == null) {
        return time_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : time_;
      } else {
        return timeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    public Builder setTime(com.google.protobuf.Timestamp value) {
      if (timeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        time_ = value;
        onChanged();
      } else {
        timeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    public Builder setTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (timeBuilder_ == null) {
        time_ = builderForValue.build();
        onChanged();
      } else {
        timeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    public Builder mergeTime(com.google.protobuf.Timestamp value) {
      if (timeBuilder_ == null) {
        if (time_ != null) {
          time_ =
            com.google.protobuf.Timestamp.newBuilder(time_).mergeFrom(value).buildPartial();
        } else {
          time_ = value;
        }
        onChanged();
      } else {
        timeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    public Builder clearTime() {
      if (timeBuilder_ == null) {
        time_ = null;
        onChanged();
      } else {
        time_ = null;
        timeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    public com.google.protobuf.Timestamp.Builder getTimeBuilder() {
      
      onChanged();
      return getTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    public com.google.protobuf.TimestampOrBuilder getTimeOrBuilder() {
      if (timeBuilder_ != null) {
        return timeBuilder_.getMessageOrBuilder();
      } else {
        return time_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : time_;
      }
    }
    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getTimeFieldBuilder() {
      if (timeBuilder_ == null) {
        timeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getTime(),
                getParentForChildren(),
                isClean());
        time_ = null;
      }
      return timeBuilder_;
    }

    private int level_ = 0;
    /**
     * <pre>
     * The log level
     * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
     * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
     * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
     * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
     * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
     * </pre>
     *
     * <code>.monitor.Level level = 2;</code>
     */
    public int getLevelValue() {
      return level_;
    }
    /**
     * <pre>
     * The log level
     * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
     * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
     * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
     * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
     * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
     * </pre>
     *
     * <code>.monitor.Level level = 2;</code>
     */
    public Builder setLevelValue(int value) {
      level_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The log level
     * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
     * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
     * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
     * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
     * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
     * </pre>
     *
     * <code>.monitor.Level level = 2;</code>
     */
    public org.thethingsnetwork.api.monitor.Level getLevel() {
      org.thethingsnetwork.api.monitor.Level result = org.thethingsnetwork.api.monitor.Level.valueOf(level_);
      return result == null ? org.thethingsnetwork.api.monitor.Level.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The log level
     * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
     * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
     * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
     * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
     * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
     * </pre>
     *
     * <code>.monitor.Level level = 2;</code>
     */
    public Builder setLevel(org.thethingsnetwork.api.monitor.Level value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      level_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The log level
     * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
     * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
     * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
     * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
     * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
     * </pre>
     *
     * <code>.monitor.Level level = 2;</code>
     */
    public Builder clearLevel() {
      
      level_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object message_ = "";
    /**
     * <pre>
     * The log message is a short description of what's happening.
     * - Log messages are full sentences that start with a capital letter.
     * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
     * - Log messages do generally not end with a period (for example: "Connected to database").
     * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
     * </pre>
     *
     * <code>string message = 3;</code>
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        message_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The log message is a short description of what's happening.
     * - Log messages are full sentences that start with a capital letter.
     * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
     * - Log messages do generally not end with a period (for example: "Connected to database").
     * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
     * </pre>
     *
     * <code>string message = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The log message is a short description of what's happening.
     * - Log messages are full sentences that start with a capital letter.
     * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
     * - Log messages do generally not end with a period (for example: "Connected to database").
     * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
     * </pre>
     *
     * <code>string message = 3;</code>
     */
    public Builder setMessage(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      message_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The log message is a short description of what's happening.
     * - Log messages are full sentences that start with a capital letter.
     * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
     * - Log messages do generally not end with a period (for example: "Connected to database").
     * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
     * </pre>
     *
     * <code>string message = 3;</code>
     */
    public Builder clearMessage() {
      
      message_ = getDefaultInstance().getMessage();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The log message is a short description of what's happening.
     * - Log messages are full sentences that start with a capital letter.
     * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
     * - Log messages do generally not end with a period (for example: "Connected to database").
     * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
     * </pre>
     *
     * <code>string message = 3;</code>
     */
    public Builder setMessageBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      message_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.Struct fields_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> fieldsBuilder_;
    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    public boolean hasFields() {
      return fieldsBuilder_ != null || fields_ != null;
    }
    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    public com.google.protobuf.Struct getFields() {
      if (fieldsBuilder_ == null) {
        return fields_ == null ? com.google.protobuf.Struct.getDefaultInstance() : fields_;
      } else {
        return fieldsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    public Builder setFields(com.google.protobuf.Struct value) {
      if (fieldsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fields_ = value;
        onChanged();
      } else {
        fieldsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    public Builder setFields(
        com.google.protobuf.Struct.Builder builderForValue) {
      if (fieldsBuilder_ == null) {
        fields_ = builderForValue.build();
        onChanged();
      } else {
        fieldsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    public Builder mergeFields(com.google.protobuf.Struct value) {
      if (fieldsBuilder_ == null) {
        if (fields_ != null) {
          fields_ =
            com.google.protobuf.Struct.newBuilder(fields_).mergeFrom(value).buildPartial();
        } else {
          fields_ = value;
        }
        onChanged();
      } else {
        fieldsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    public Builder clearFields() {
      if (fieldsBuilder_ == null) {
        fields_ = null;
        onChanged();
      } else {
        fields_ = null;
        fieldsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    public com.google.protobuf.Struct.Builder getFieldsBuilder() {
      
      onChanged();
      return getFieldsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    public com.google.protobuf.StructOrBuilder getFieldsOrBuilder() {
      if (fieldsBuilder_ != null) {
        return fieldsBuilder_.getMessageOrBuilder();
      } else {
        return fields_ == null ?
            com.google.protobuf.Struct.getDefaultInstance() : fields_;
      }
    }
    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> 
        getFieldsFieldBuilder() {
      if (fieldsBuilder_ == null) {
        fieldsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder>(
                getFields(),
                getParentForChildren(),
                isClean());
        fields_ = null;
      }
      return fieldsBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:monitor.LogMessage)
  }

  // @@protoc_insertion_point(class_scope:monitor.LogMessage)
  private static final org.thethingsnetwork.api.monitor.LogMessage DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.thethingsnetwork.api.monitor.LogMessage();
  }

  public static org.thethingsnetwork.api.monitor.LogMessage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LogMessage>
      PARSER = new com.google.protobuf.AbstractParser<LogMessage>() {
    public LogMessage parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new LogMessage(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LogMessage> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LogMessage> getParserForType() {
    return PARSER;
  }

  public org.thethingsnetwork.api.monitor.LogMessage getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

