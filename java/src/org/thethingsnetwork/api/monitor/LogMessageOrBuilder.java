// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/TheThingsNetwork/api/monitor/monitor.proto

package org.thethingsnetwork.api.monitor;

public interface LogMessageOrBuilder extends
    // @@protoc_insertion_point(interface_extends:monitor.LogMessage)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Timestamp of the log message. Will be filled by the server if empty.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
   */
  boolean hasTime();
  /**
   * <pre>
   * Timestamp of the log message. Will be filled by the server if empty.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
   */
  com.google.protobuf.Timestamp getTime();
  /**
   * <pre>
   * Timestamp of the log message. Will be filled by the server if empty.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
   */
  com.google.protobuf.TimestampOrBuilder getTimeOrBuilder();

  /**
   * <pre>
   * The log level
   * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
   * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
   * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
   * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
   * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
   * </pre>
   *
   * <code>.monitor.Level level = 2;</code>
   */
  int getLevelValue();
  /**
   * <pre>
   * The log level
   * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
   * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
   * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
   * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
   * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
   * </pre>
   *
   * <code>.monitor.Level level = 2;</code>
   */
  org.thethingsnetwork.api.monitor.Level getLevel();

  /**
   * <pre>
   * The log message is a short description of what's happening.
   * - Log messages are full sentences that start with a capital letter.
   * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
   * - Log messages do generally not end with a period (for example: "Connected to database").
   * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
   * </pre>
   *
   * <code>string message = 3;</code>
   */
  java.lang.String getMessage();
  /**
   * <pre>
   * The log message is a short description of what's happening.
   * - Log messages are full sentences that start with a capital letter.
   * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
   * - Log messages do generally not end with a period (for example: "Connected to database").
   * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
   * </pre>
   *
   * <code>string message = 3;</code>
   */
  com.google.protobuf.ByteString
      getMessageBytes();

  /**
   * <pre>
   * Structured log fields allow analyses
   * - Add fields that are informative
   * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
   * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
   * - Log field names use PascalCase
   * </pre>
   *
   * <code>.google.protobuf.Struct fields = 4;</code>
   */
  boolean hasFields();
  /**
   * <pre>
   * Structured log fields allow analyses
   * - Add fields that are informative
   * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
   * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
   * - Log field names use PascalCase
   * </pre>
   *
   * <code>.google.protobuf.Struct fields = 4;</code>
   */
  com.google.protobuf.Struct getFields();
  /**
   * <pre>
   * Structured log fields allow analyses
   * - Add fields that are informative
   * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
   * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
   * - Log field names use PascalCase
   * </pre>
   *
   * <code>.google.protobuf.Struct fields = 4;</code>
   */
  com.google.protobuf.StructOrBuilder getFieldsOrBuilder();
}
