<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: github.com/TheThingsNetwork/api/monitor/monitor.proto

namespace Monitor;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>monitor.LogMessage</code>
 */
class LogMessage extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    private $time = null;
    /**
     * <pre>
     * The log level
     * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
     * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
     * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
     * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
     * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
     * </pre>
     *
     * <code>.monitor.Level level = 2;</code>
     */
    private $level = 0;
    /**
     * <pre>
     * The log message is a short description of what's happening.
     * - Log messages are full sentences that start with a capital letter.
     * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
     * - Log messages do generally not end with a period (for example: "Connected to database").
     * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
     * </pre>
     *
     * <code>string message = 3;</code>
     */
    private $message = '';
    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    private $fields = null;

    public function __construct() {
        \GPBMetadata\GithubCom\TheThingsNetwork\Api\Monitor\Monitor::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    public function getTime()
    {
        return $this->time;
    }

    /**
     * <pre>
     * Timestamp of the log message. Will be filled by the server if empty.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1 [(.gogoproto.stdtime) = true];</code>
     */
    public function setTime(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->time = $var;
    }

    /**
     * <pre>
     * The log level
     * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
     * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
     * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
     * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
     * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
     * </pre>
     *
     * <code>.monitor.Level level = 2;</code>
     */
    public function getLevel()
    {
        return $this->level;
    }

    /**
     * <pre>
     * The log level
     * DEBUG: Messages that help debug the execution of some logic; SHOULD NOT be used in production.
     * INFO:  Messages that inform about an event (request, uplink, ...); a single event MUST NOT trigger more than one INFO message.
     * WARN:  Messages that warn about unexpected events, but the program can cope with those just fine (bad user input, something not found).
     * ERROR: Messages that indicate a problem in the program that may require user intervention, but the program can keep running.
     * FATAL: Messages that indicate a problem that prevents the program from continuing. FATAL messages trigger an "exit 1" after forwarding.
     * </pre>
     *
     * <code>.monitor.Level level = 2;</code>
     */
    public function setLevel($var)
    {
        GPBUtil::checkEnum($var, \Monitor\Level::class);
        $this->level = $var;
    }

    /**
     * <pre>
     * The log message is a short description of what's happening.
     * - Log messages are full sentences that start with a capital letter.
     * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
     * - Log messages do generally not end with a period (for example: "Connected to database").
     * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
     * </pre>
     *
     * <code>string message = 3;</code>
     */
    public function getMessage()
    {
        return $this->message;
    }

    /**
     * <pre>
     * The log message is a short description of what's happening.
     * - Log messages are full sentences that start with a capital letter.
     * - Log messages do not shorten words (use "Could not" instead of "Couldn't")
     * - Log messages do generally not end with a period (for example: "Connected to database").
     * - Log messages can end with three periods (...) if something is about to happen (for example: "Connecting to database...").
     * </pre>
     *
     * <code>string message = 3;</code>
     */
    public function setMessage($var)
    {
        GPBUtil::checkString($var, True);
        $this->message = $var;
    }

    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    public function getFields()
    {
        return $this->fields;
    }

    /**
     * <pre>
     * Structured log fields allow analyses
     * - Add fields that are informative
     * - Add fields that someone might want to use to filter the logs (for example: IDs/EUIs, ...)
     * - Add fields that someone might want to use to visualize the logs (for example: number of results per query, duration, ...)
     * - Log field names use PascalCase
     * </pre>
     *
     * <code>.google.protobuf.Struct fields = 4;</code>
     */
    public function setFields(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Struct::class);
        $this->fields = $var;
    }

}

